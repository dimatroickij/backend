apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${SERVICE_NAME}
spec:
  selector:
    matchLabels:
      app: ${SERVICE_NAME}
  replicas: 1
  template:
    metadata:
      labels:
        app: ${SERVICE_NAME}
    spec:
      containers:
      - image: ${IMAGE_TAG}-${SERVICE_NAME}
        name: ${SERVICE_NAME}
        ports:
        - containerPort: 8080
        env:
        - name: CONFIG_URL
          value: "${CONFIG_URL}"
        - name: CONFIG_SERVICE_PASS
          value: "${CONFIG_SERVICE_PASS}"
        - name: CONFIG_SERVICE_USER
          value: "${CONFIG_SERVICE_USER}"
        - name: DEF_JAVA_OPTIONS
          value: "${DEF_JAVA_OPTIONS}"
        - name: SERVER_PORT
          value: "${SERVER_PORT}"

---

apiVersion: v1
kind: Service
metadata:
  name: ${SERVICE_NAME}
spec:
  selector:
    app: ${SERVICE_NAME}
  ports:
  - name: "8080"
    port: 8080
    targetPort: 8080
  type: ClusterIP
status:
  loadBalancer: {}

---

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ${SERVICE_NAME}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "64k"
    nginx.ingress.kubernetes.io/proxy-buffers: "64k"
    nginx.ingress.kubernetes.io/proxy-busy-buffers: "64k"
    nginx.ingress.kubernetes.io/fastcgi-buffer-size: "32k"
    nginx.ingress.kubernetes.io/fastcgi-buffers: "4"
    nginx.ingress.kubernetes.io/rewrite-target: ${REWRITE_TARGET}
spec:
  rules:
  - http:
      paths:
      - path: ${PATH_PREFIX}/${SERVICE_NAME}?(.*)
        pathType: Prefix
        backend:
          serviceName: ${SERVICE_NAME}
          servicePort: 8080